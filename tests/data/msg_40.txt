Return-Path: <tziade@nuxeo.com>
Delivered-To: tziade@nuxeo.com
Received: (qmail 13796 invoked by uid 1008); 5 Apr 2005 11:33:45 +0200
Delivered-To: nuxeo.com-cvs-checkins@nuxeo.com
Received: (qmail 13792 invoked by uid 1009); 5 Apr 2005 11:33:45 +0200
Received: from tziade@nuxeo.com by tamise.nuxeo.com by uid 1008 with qmail-scanner-1.22-st-qms 
 (clamscan: 0.75-1. spamassassin: 3.0.0.  Clear:RC:0(213.56.215.224):SA:0(-2.6/5.0):. 
 Processed in 4.912615 secs); 05 Apr 2005 09:33:45 -0000
X-Spam-Status: No, hits=-2.6 required=5.0
Received: from gateway.nuxeo.com (213.56.215.224)
  by tamise.nuxeo.com with SMTP; 5 Apr 2005 11:33:40 +0200
Received: from bertha.in.nuxeo.com (bertha.in.nuxeo.com [192.168.2.20])
	by gateway.nuxeo.com (Postfix) with ESMTP id C544B1DC62
	for <cvs-checkins@nuxeo.com>; Tue,  5 Apr 2005 11:33:44 +0200 (CEST)
Received: by bertha.in.nuxeo.com (Postfix, from userid 2024)
	id 9B034FF802; Tue,  5 Apr 2005 11:33:39 +0200 (CEST)
Subject: CVS: CPSMailAccess/tests - test_mailbox.py:1.35.2.2 test_mailmessage.py:1.34.2.3 test_objectinteractions.py:1.16.2.1 test_mailsearchview.py:1.10.2.1
To: cvs-checkins@nuxeo.com
From: Tarek Ziade <tziade@nuxeo.com>
Sender: cvs-admin@nuxeo.com
Message-Id: <20050405093339.9B034FF802@bertha.in.nuxeo.com>
Date: Tue,  5 Apr 2005 11:33:39 +0200 (CEST)

Update of /home/cvs/CPSMailAccess/tests
In directory bertha.in.nuxeo.com:/tmp/cvs-serv17516/tests

Modified Files:
      Tag: SIMPLIFIED
	test_mailbox.py test_mailmessage.py test_objectinteractions.py 
	test_mailsearchview.py 
Log Message:
corrections + more tests

=== CPSMailAccess/tests/test_mailbox.py 1.35.2.1 => 1.35.2.2 ===
     def test_synchronize(self):
         mailbox = self._getMailBox()
         logs = mailbox.synchronize()
-        self.assert_(len(logs)>100)
+        self.assert_(len(logs)>30)
 
     def test_searchUsers(self):
         self.portal.portal_directory = FakeDirectoryTool()


=== CPSMailAccess/tests/test_mailmessage.py 1.34.2.2 => 1.34.2.3 ===
         ob2 = MailMessage('uid2', 'uid2')
         ob2.copyFrom(ob)
         self.assertNotEquals(ob.uid, ob2.uid)
-        self.assertEquals(ob.read, ob2.read)
+        self.assertEquals(ob.seen, ob2.seen)
 
     def test_copyFromHeaders(self):
         ob = self.getMailInstance(6)
@@ -273,27 +273,27 @@
         # testing get an set flags and triggering
         ob = self.getMailInstance(35)
 
-        self.assertEquals(ob.getFlag('read'), 0)
-        ob.setFlag('read', 1)
-        self.assert_(ob.getFlag('read') == 1)
+        self.assertEquals(ob.getFlag('seen'), 0)
+        ob.setFlag('seen', 1)
+        self.assert_(ob.getFlag('seen') == 1)
 
         # try out event triggering
         ob.onFlagChanged = self._onFlagChanged
         self._called = 0
-        ob.setFlag('read', 0)
+        ob.setFlag('seen', 0)
         # test continues in _onFlagChanged
         # checks that _onFlagChanged has been called
         self.assertEquals(self._called, 1)
 
         # if no changes, it's not called
         self._called = 0
-        ob.setFlag('read', 0)
+        ob.setFlag('seen', 0)
         self.assertEquals(self._called, 0)
 
     def _onFlagChanged(self, msg, flag, value):
-        self.assert_(flag == 'read')
+        self.assert_(flag == 'seen')
         self.assert_(value == 0)
-        self.assert_(msg.getFlag('read') ==  0)
+        self.assert_(msg.getFlag('seen') ==  0)
         self._called = 1
 
     def test_getDirectBody(self):


=== CPSMailAccess/tests/test_objectinteractions.py 1.16 => 1.16.2.1 ===
         # now removes Trash
         mailbox._syncdirs([{'Name' : 'INBOX', 'Attributes' : ''},
                            {'Name' : 'INBOX.One', 'Attributes' : ''},
-                           {'Name' : 'INBOX.[BCEAO]', 'Attributes' : ''}])
+                           {'Name' : 'INBOX.[BCEAO]', 'Attributes' : ''}],
+                           light=False)
 
         folders = mailbox.getMailMessages(True, False, True)
 


=== CPSMailAccess/tests/test_mailsearchview.py 1.10 => 1.10.2.1 ===
         self.count +=1
         return ('', 'nowere/my_message_' + str(self.count))
 
-    def _getView(self):
+    def _getView(self, full_indexation=True):
         """ for test purpose,
             we create one catalog for the user "bob"
             with a few mails indexed
@@ -51,7 +51,7 @@
             ob.getPhysicalPath = self.fakeGetPhysicalPath
             ob = ob.__of__(self.portal)
             cat.indexMessage(ob)
-            zcat.indexMessage(ob)
+            zcat.indexMessage(ob, full_indexation)
 
         searchview = MailSearchView(box, self.request)
         searchview = searchview.__of__(box)
@@ -106,6 +106,80 @@
 
     def test_zemantic_searchs(self):
         searchview, cat, zcat, box = self._getView()    # also fills cat
+        self.assertEquals(box._getCatalog(), cat)
+
+        query = {}
+        query['relation_0'] = 'cc'        # relations keys are normalized (lower)
+        query['value_0'] = '*'    # all
+        results = searchview.zemanticSearchMessages(**query)[0]
+
+        # results order won't be known
+        self.assertEquals(len(results), 3)
+
+        query = {}
+        query['relation_0'] = 'cc'        # relations keys are normalized (lower)
+        query['value_0'] = 'ccc*'
+        results = searchview.zemanticSearchMessages(**query)[0]
+
+        self.assertEquals(len(results), 1)
+
+        # trying intersections
+        query = {}
+        query['relation_0'] = 'cc'        # relations keys are normalized (lower)
+        query['value_0'] = 'ccc*'
+        query['intersection'] = 'store is open'
+        results = searchview.zemanticSearchMessages(**query)[0]
+
+        self.assertEquals(len(results), 1)
+
+        # trying intersections
+        query = {}
+        query['relation_0'] = 'cc'        # relations keys are normalized (lower)
+        query['value_0'] = '*'
+        query['relation_1'] = 'subject'        # relations keys are normalized (lower)
+        query['value_1'] = 'test'
+        query['intersection'] = 'store is open'
+        results = searchview.zemanticSearchMessages(**query)[0]
+
+        self.assertEquals(len(results), 3)
+
+        query = {}
+        query['intersection'] = 'store is open'
+        results = searchview.zemanticSearchMessages(**query)[0]
+        self.assertEquals(len(results), 0)
+
+    def test_instanciation_light(self):
+        searchview = self._getView(False)
+        self.assertNotEquals(searchview, None)
+
+    def test_searchs_light(self):
+        searchview, cat, zcat, box = self._getView(False)
+        self.assertEquals(box._getCatalog(), cat)
+        query = {}
+        query['searchable_text'] = u'Lovers'
+
+        res = cat.search(query_request=query)
+        direct_search = []
+        for brain in res:
+            direct_search.append(brain.getPath())
+
+        results = searchview.searchMessages('Dingus Lovers')[0]
+
+        for res in results:
+            self.assert_(res['path'] in direct_search)
+
+    def test_weirdo_searchs_light(self):
+        searchview, cat, zcat, box = self._getView(False)
+        results = searchview.searchMessages('é')
+
+    def test_zemanticPredicateList_light(self):
+        searchview, cat, zcat, box = self._getView(False)
+        list_ = searchview.zemanticPredicateList()
+        self.assertEquals(list_, [u'cc', u'date', u'from', u'sender',
+                                  u'subject', u'to'])
+
+    def test_zemantic_searchs_light(self):
+        searchview, cat, zcat, box = self._getView(False)
         self.assertEquals(box._getCatalog(), cat)
 
         query = {}

